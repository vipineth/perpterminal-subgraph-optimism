// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ClearingHouseChanged extends ethereum.Event {
  get params(): ClearingHouseChanged__Params {
    return new ClearingHouseChanged__Params(this);
  }
}

export class ClearingHouseChanged__Params {
  _event: ClearingHouseChanged;

  constructor(event: ClearingHouseChanged) {
    this._event = event;
  }

  get clearingHouse(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PnlRealized extends ethereum.Event {
  get params(): PnlRealized__Params {
    return new PnlRealized__Params(this);
  }
}

export class PnlRealized__Params {
  _event: PnlRealized;

  constructor(event: PnlRealized) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class VaultChanged extends ethereum.Event {
  get params(): VaultChanged__Params {
    return new VaultChanged__Params(this);
  }
}

export class VaultChanged__Params {
  _event: VaultChanged;

  constructor(event: VaultChanged) {
    this._event = event;
  }

  get vault(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AccountBalance__getAccountInfoResultValue0Struct extends ethereum.Tuple {
  get takerPositionSize(): BigInt {
    return this[0].toBigInt();
  }

  get takerOpenNotional(): BigInt {
    return this[1].toBigInt();
  }

  get lastTwPremiumGrowthGlobalX96(): BigInt {
    return this[2].toBigInt();
  }
}

export class AccountBalance__getPnlAndPendingFeeResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class AccountBalance__modifyTakerBalanceResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromSignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromSignedBigInt(this.value1));
    return map;
  }
}

export class AccountBalance extends ethereum.SmartContract {
  static bind(address: Address): AccountBalance {
    return new AccountBalance("AccountBalance", address);
  }

  candidate(): Address {
    let result = super.call("candidate", "candidate():(address)", []);

    return result[0].toAddress();
  }

  try_candidate(): ethereum.CallResult<Address> {
    let result = super.tryCall("candidate", "candidate():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountInfo(
    trader: Address,
    baseToken: Address
  ): AccountBalance__getAccountInfoResultValue0Struct {
    let result = super.call(
      "getAccountInfo",
      "getAccountInfo(address,address):((int256,int256,int256))",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return changetype<AccountBalance__getAccountInfoResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAccountInfo(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<AccountBalance__getAccountInfoResultValue0Struct> {
    let result = super.tryCall(
      "getAccountInfo",
      "getAccountInfo(address,address):((int256,int256,int256))",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<AccountBalance__getAccountInfoResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getBase(trader: Address, baseToken: Address): BigInt {
    let result = super.call("getBase", "getBase(address,address):(int256)", [
      ethereum.Value.fromAddress(trader),
      ethereum.Value.fromAddress(baseToken)
    ]);

    return result[0].toBigInt();
  }

  try_getBase(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getBase", "getBase(address,address):(int256)", [
      ethereum.Value.fromAddress(trader),
      ethereum.Value.fromAddress(baseToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBaseTokens(trader: Address): Array<Address> {
    let result = super.call(
      "getBaseTokens",
      "getBaseTokens(address):(address[])",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toAddressArray();
  }

  try_getBaseTokens(trader: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getBaseTokens",
      "getBaseTokens(address):(address[])",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getClearingHouse(): Address {
    let result = super.call(
      "getClearingHouse",
      "getClearingHouse():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getClearingHouse(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClearingHouse",
      "getClearingHouse():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getClearingHouseConfig(): Address {
    let result = super.call(
      "getClearingHouseConfig",
      "getClearingHouseConfig():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getClearingHouseConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClearingHouseConfig",
      "getClearingHouseConfig():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getMarginRequirementForLiquidation(trader: Address): BigInt {
    let result = super.call(
      "getMarginRequirementForLiquidation",
      "getMarginRequirementForLiquidation(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getMarginRequirementForLiquidation(
    trader: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getMarginRequirementForLiquidation",
      "getMarginRequirementForLiquidation(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getOrderBook(): Address {
    let result = super.call("getOrderBook", "getOrderBook():(address)", []);

    return result[0].toAddress();
  }

  try_getOrderBook(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOrderBook", "getOrderBook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPnlAndPendingFee(
    trader: Address
  ): AccountBalance__getPnlAndPendingFeeResult {
    let result = super.call(
      "getPnlAndPendingFee",
      "getPnlAndPendingFee(address):(int256,int256,uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return new AccountBalance__getPnlAndPendingFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getPnlAndPendingFee(
    trader: Address
  ): ethereum.CallResult<AccountBalance__getPnlAndPendingFeeResult> {
    let result = super.tryCall(
      "getPnlAndPendingFee",
      "getPnlAndPendingFee(address):(int256,int256,uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AccountBalance__getPnlAndPendingFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getQuote(trader: Address, baseToken: Address): BigInt {
    let result = super.call("getQuote", "getQuote(address,address):(int256)", [
      ethereum.Value.fromAddress(trader),
      ethereum.Value.fromAddress(baseToken)
    ]);

    return result[0].toBigInt();
  }

  try_getQuote(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getQuote",
      "getQuote(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTakerOpenNotional(trader: Address, baseToken: Address): BigInt {
    let result = super.call(
      "getTakerOpenNotional",
      "getTakerOpenNotional(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTakerOpenNotional(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTakerOpenNotional",
      "getTakerOpenNotional(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTakerPositionSize(trader: Address, baseToken: Address): BigInt {
    let result = super.call(
      "getTakerPositionSize",
      "getTakerPositionSize(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTakerPositionSize(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTakerPositionSize",
      "getTakerPositionSize(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalAbsPositionValue(trader: Address): BigInt {
    let result = super.call(
      "getTotalAbsPositionValue",
      "getTotalAbsPositionValue(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getTotalAbsPositionValue(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalAbsPositionValue",
      "getTotalAbsPositionValue(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalDebtValue(trader: Address): BigInt {
    let result = super.call(
      "getTotalDebtValue",
      "getTotalDebtValue(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getTotalDebtValue(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalDebtValue",
      "getTotalDebtValue(address):(uint256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalOpenNotional(trader: Address, baseToken: Address): BigInt {
    let result = super.call(
      "getTotalOpenNotional",
      "getTotalOpenNotional(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalOpenNotional(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalOpenNotional",
      "getTotalOpenNotional(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPositionSize(trader: Address, baseToken: Address): BigInt {
    let result = super.call(
      "getTotalPositionSize",
      "getTotalPositionSize(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalPositionSize(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPositionSize",
      "getTotalPositionSize(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getTotalPositionValue(trader: Address, baseToken: Address): BigInt {
    let result = super.call(
      "getTotalPositionValue",
      "getTotalPositionValue(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTotalPositionValue(
    trader: Address,
    baseToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTotalPositionValue",
      "getTotalPositionValue(address,address):(int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  hasOrder(trader: Address): boolean {
    let result = super.call("hasOrder", "hasOrder(address):(bool)", [
      ethereum.Value.fromAddress(trader)
    ]);

    return result[0].toBoolean();
  }

  try_hasOrder(trader: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasOrder", "hasOrder(address):(bool)", [
      ethereum.Value.fromAddress(trader)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  modifyTakerBalance(
    trader: Address,
    baseToken: Address,
    base: BigInt,
    quote: BigInt
  ): AccountBalance__modifyTakerBalanceResult {
    let result = super.call(
      "modifyTakerBalance",
      "modifyTakerBalance(address,address,int256,int256):(int256,int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken),
        ethereum.Value.fromSignedBigInt(base),
        ethereum.Value.fromSignedBigInt(quote)
      ]
    );

    return new AccountBalance__modifyTakerBalanceResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_modifyTakerBalance(
    trader: Address,
    baseToken: Address,
    base: BigInt,
    quote: BigInt
  ): ethereum.CallResult<AccountBalance__modifyTakerBalanceResult> {
    let result = super.tryCall(
      "modifyTakerBalance",
      "modifyTakerBalance(address,address,int256,int256):(int256,int256)",
      [
        ethereum.Value.fromAddress(trader),
        ethereum.Value.fromAddress(baseToken),
        ethereum.Value.fromSignedBigInt(base),
        ethereum.Value.fromSignedBigInt(quote)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new AccountBalance__modifyTakerBalanceResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  settleOwedRealizedPnl(trader: Address): BigInt {
    let result = super.call(
      "settleOwedRealizedPnl",
      "settleOwedRealizedPnl(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_settleOwedRealizedPnl(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "settleOwedRealizedPnl",
      "settleOwedRealizedPnl(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class DeregisterBaseTokenCall extends ethereum.Call {
  get inputs(): DeregisterBaseTokenCall__Inputs {
    return new DeregisterBaseTokenCall__Inputs(this);
  }

  get outputs(): DeregisterBaseTokenCall__Outputs {
    return new DeregisterBaseTokenCall__Outputs(this);
  }
}

export class DeregisterBaseTokenCall__Inputs {
  _call: DeregisterBaseTokenCall;

  constructor(call: DeregisterBaseTokenCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeregisterBaseTokenCall__Outputs {
  _call: DeregisterBaseTokenCall;

  constructor(call: DeregisterBaseTokenCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get clearingHouseConfigArg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get orderBookArg(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class ModifyOwedRealizedPnlCall extends ethereum.Call {
  get inputs(): ModifyOwedRealizedPnlCall__Inputs {
    return new ModifyOwedRealizedPnlCall__Inputs(this);
  }

  get outputs(): ModifyOwedRealizedPnlCall__Outputs {
    return new ModifyOwedRealizedPnlCall__Outputs(this);
  }
}

export class ModifyOwedRealizedPnlCall__Inputs {
  _call: ModifyOwedRealizedPnlCall;

  constructor(call: ModifyOwedRealizedPnlCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ModifyOwedRealizedPnlCall__Outputs {
  _call: ModifyOwedRealizedPnlCall;

  constructor(call: ModifyOwedRealizedPnlCall) {
    this._call = call;
  }
}

export class ModifyTakerBalanceCall extends ethereum.Call {
  get inputs(): ModifyTakerBalanceCall__Inputs {
    return new ModifyTakerBalanceCall__Inputs(this);
  }

  get outputs(): ModifyTakerBalanceCall__Outputs {
    return new ModifyTakerBalanceCall__Outputs(this);
  }
}

export class ModifyTakerBalanceCall__Inputs {
  _call: ModifyTakerBalanceCall;

  constructor(call: ModifyTakerBalanceCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get base(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get quote(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class ModifyTakerBalanceCall__Outputs {
  _call: ModifyTakerBalanceCall;

  constructor(call: ModifyTakerBalanceCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get value1(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class RegisterBaseTokenCall extends ethereum.Call {
  get inputs(): RegisterBaseTokenCall__Inputs {
    return new RegisterBaseTokenCall__Inputs(this);
  }

  get outputs(): RegisterBaseTokenCall__Outputs {
    return new RegisterBaseTokenCall__Outputs(this);
  }
}

export class RegisterBaseTokenCall__Inputs {
  _call: RegisterBaseTokenCall;

  constructor(call: RegisterBaseTokenCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RegisterBaseTokenCall__Outputs {
  _call: RegisterBaseTokenCall;

  constructor(call: RegisterBaseTokenCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetClearingHouseCall extends ethereum.Call {
  get inputs(): SetClearingHouseCall__Inputs {
    return new SetClearingHouseCall__Inputs(this);
  }

  get outputs(): SetClearingHouseCall__Outputs {
    return new SetClearingHouseCall__Outputs(this);
  }
}

export class SetClearingHouseCall__Inputs {
  _call: SetClearingHouseCall;

  constructor(call: SetClearingHouseCall) {
    this._call = call;
  }

  get clearingHouseArg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetClearingHouseCall__Outputs {
  _call: SetClearingHouseCall;

  constructor(call: SetClearingHouseCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetVaultCall extends ethereum.Call {
  get inputs(): SetVaultCall__Inputs {
    return new SetVaultCall__Inputs(this);
  }

  get outputs(): SetVaultCall__Outputs {
    return new SetVaultCall__Outputs(this);
  }
}

export class SetVaultCall__Inputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }

  get vaultArg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetVaultCall__Outputs {
  _call: SetVaultCall;

  constructor(call: SetVaultCall) {
    this._call = call;
  }
}

export class SettleBalanceAndDeregisterCall extends ethereum.Call {
  get inputs(): SettleBalanceAndDeregisterCall__Inputs {
    return new SettleBalanceAndDeregisterCall__Inputs(this);
  }

  get outputs(): SettleBalanceAndDeregisterCall__Outputs {
    return new SettleBalanceAndDeregisterCall__Outputs(this);
  }
}

export class SettleBalanceAndDeregisterCall__Inputs {
  _call: SettleBalanceAndDeregisterCall;

  constructor(call: SettleBalanceAndDeregisterCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get takerBase(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get takerQuote(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get realizedPnl(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get fee(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class SettleBalanceAndDeregisterCall__Outputs {
  _call: SettleBalanceAndDeregisterCall;

  constructor(call: SettleBalanceAndDeregisterCall) {
    this._call = call;
  }
}

export class SettleOwedRealizedPnlCall extends ethereum.Call {
  get inputs(): SettleOwedRealizedPnlCall__Inputs {
    return new SettleOwedRealizedPnlCall__Inputs(this);
  }

  get outputs(): SettleOwedRealizedPnlCall__Outputs {
    return new SettleOwedRealizedPnlCall__Outputs(this);
  }
}

export class SettleOwedRealizedPnlCall__Inputs {
  _call: SettleOwedRealizedPnlCall;

  constructor(call: SettleOwedRealizedPnlCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SettleOwedRealizedPnlCall__Outputs {
  _call: SettleOwedRealizedPnlCall;

  constructor(call: SettleOwedRealizedPnlCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SettleQuoteToOwedRealizedPnlCall extends ethereum.Call {
  get inputs(): SettleQuoteToOwedRealizedPnlCall__Inputs {
    return new SettleQuoteToOwedRealizedPnlCall__Inputs(this);
  }

  get outputs(): SettleQuoteToOwedRealizedPnlCall__Outputs {
    return new SettleQuoteToOwedRealizedPnlCall__Outputs(this);
  }
}

export class SettleQuoteToOwedRealizedPnlCall__Inputs {
  _call: SettleQuoteToOwedRealizedPnlCall;

  constructor(call: SettleQuoteToOwedRealizedPnlCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SettleQuoteToOwedRealizedPnlCall__Outputs {
  _call: SettleQuoteToOwedRealizedPnlCall;

  constructor(call: SettleQuoteToOwedRealizedPnlCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall extends ethereum.Call {
  get inputs(): UpdateOwnerCall__Inputs {
    return new UpdateOwnerCall__Inputs(this);
  }

  get outputs(): UpdateOwnerCall__Outputs {
    return new UpdateOwnerCall__Outputs(this);
  }
}

export class UpdateOwnerCall__Inputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall__Outputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}

export class UpdateTwPremiumGrowthGlobalCall extends ethereum.Call {
  get inputs(): UpdateTwPremiumGrowthGlobalCall__Inputs {
    return new UpdateTwPremiumGrowthGlobalCall__Inputs(this);
  }

  get outputs(): UpdateTwPremiumGrowthGlobalCall__Outputs {
    return new UpdateTwPremiumGrowthGlobalCall__Outputs(this);
  }
}

export class UpdateTwPremiumGrowthGlobalCall__Inputs {
  _call: UpdateTwPremiumGrowthGlobalCall;

  constructor(call: UpdateTwPremiumGrowthGlobalCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get lastTwPremiumGrowthGlobalX96(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class UpdateTwPremiumGrowthGlobalCall__Outputs {
  _call: UpdateTwPremiumGrowthGlobalCall;

  constructor(call: UpdateTwPremiumGrowthGlobalCall) {
    this._call = call;
  }
}
