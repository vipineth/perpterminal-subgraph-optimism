// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundingPaymentSettled extends ethereum.Event {
  get params(): FundingPaymentSettled__Params {
    return new FundingPaymentSettled__Params(this);
  }
}

export class FundingPaymentSettled__Params {
  _event: FundingPaymentSettled;

  constructor(event: FundingPaymentSettled) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get fundingPayment(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LiquidityChanged extends ethereum.Event {
  get params(): LiquidityChanged__Params {
    return new LiquidityChanged__Params(this);
  }
}

export class LiquidityChanged__Params {
  _event: LiquidityChanged;

  constructor(event: LiquidityChanged) {
    this._event = event;
  }

  get maker(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get lowerTick(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get upperTick(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get base(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get quote(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get liquidity(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get quoteFee(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PositionChanged extends ethereum.Event {
  get params(): PositionChanged__Params {
    return new PositionChanged__Params(this);
  }
}

export class PositionChanged__Params {
  _event: PositionChanged;

  constructor(event: PositionChanged) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get exchangedPositionSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get exchangedPositionNotional(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get fee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get openNotional(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get realizedPnl(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get sqrtPriceAfterX96(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class PositionLiquidated extends ethereum.Event {
  get params(): PositionLiquidated__Params {
    return new PositionLiquidated__Params(this);
  }
}

export class PositionLiquidated__Params {
  _event: PositionLiquidated;

  constructor(event: PositionLiquidated) {
    this._event = event;
  }

  get trader(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get positionNotional(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get positionSize(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get liquidationFee(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get liquidator(): Address {
    return this._event.parameters[5].value.toAddress();
  }
}

export class ReferredPositionChanged extends ethereum.Event {
  get params(): ReferredPositionChanged__Params {
    return new ReferredPositionChanged__Params(this);
  }
}

export class ReferredPositionChanged__Params {
  _event: ReferredPositionChanged;

  constructor(event: ReferredPositionChanged) {
    this._event = event;
  }

  get referralCode(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }
}

export class TrustedForwarderChanged extends ethereum.Event {
  get params(): TrustedForwarderChanged__Params {
    return new TrustedForwarderChanged__Params(this);
  }
}

export class TrustedForwarderChanged__Params {
  _event: TrustedForwarderChanged;

  constructor(event: TrustedForwarderChanged) {
    this._event = event;
  }

  get forwarder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class TrustedForwarderUpdated extends ethereum.Event {
  get params(): TrustedForwarderUpdated__Params {
    return new TrustedForwarderUpdated__Params(this);
  }
}

export class TrustedForwarderUpdated__Params {
  _event: TrustedForwarderUpdated;

  constructor(event: TrustedForwarderUpdated) {
    this._event = event;
  }

  get trustedForwarder(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ClearingHouse__addLiquidityResultValue0Struct extends ethereum.Tuple {
  get base(): BigInt {
    return this[0].toBigInt();
  }

  get quote(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): BigInt {
    return this[2].toBigInt();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }
}

export class ClearingHouse__addLiquidityInputParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get base(): BigInt {
    return this[1].toBigInt();
  }

  get quote(): BigInt {
    return this[2].toBigInt();
  }

  get lowerTick(): i32 {
    return this[3].toI32();
  }

  get upperTick(): i32 {
    return this[4].toI32();
  }

  get minBase(): BigInt {
    return this[5].toBigInt();
  }

  get minQuote(): BigInt {
    return this[6].toBigInt();
  }

  get useTakerBalance(): boolean {
    return this[7].toBoolean();
  }

  get deadline(): BigInt {
    return this[8].toBigInt();
  }
}

export class ClearingHouse__closePositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__closePositionInputParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[1].toBigInt();
  }

  get oppositeAmountBound(): BigInt {
    return this[2].toBigInt();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }

  get referralCode(): Bytes {
    return this[4].toBytes();
  }
}

export class ClearingHouse__openPositionResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class ClearingHouse__openPositionInputParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get isBaseToQuote(): boolean {
    return this[1].toBoolean();
  }

  get isExactInput(): boolean {
    return this[2].toBoolean();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get oppositeAmountBound(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[6].toBigInt();
  }

  get referralCode(): Bytes {
    return this[7].toBytes();
  }
}

export class ClearingHouse__removeLiquidityResultValue0Struct extends ethereum.Tuple {
  get base(): BigInt {
    return this[0].toBigInt();
  }

  get quote(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): BigInt {
    return this[2].toBigInt();
  }
}

export class ClearingHouse__removeLiquidityInputParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get lowerTick(): i32 {
    return this[1].toI32();
  }

  get upperTick(): i32 {
    return this[2].toI32();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get minBase(): BigInt {
    return this[4].toBigInt();
  }

  get minQuote(): BigInt {
    return this[5].toBigInt();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class ClearingHouse extends ethereum.SmartContract {
  static bind(address: Address): ClearingHouse {
    return new ClearingHouse("ClearingHouse", address);
  }

  addLiquidity(
    params: ClearingHouse__addLiquidityInputParamsStruct
  ): ClearingHouse__addLiquidityResultValue0Struct {
    let result = super.call(
      "addLiquidity",
      "addLiquidity((address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256)):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(params)]
    );

    return changetype<ClearingHouse__addLiquidityResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_addLiquidity(
    params: ClearingHouse__addLiquidityInputParamsStruct
  ): ethereum.CallResult<ClearingHouse__addLiquidityResultValue0Struct> {
    let result = super.tryCall(
      "addLiquidity",
      "addLiquidity((address,uint256,uint256,int24,int24,uint256,uint256,bool,uint256)):((uint256,uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ClearingHouse__addLiquidityResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  candidate(): Address {
    let result = super.call("candidate", "candidate():(address)", []);

    return result[0].toAddress();
  }

  try_candidate(): ethereum.CallResult<Address> {
    let result = super.tryCall("candidate", "candidate():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  closePosition(
    params: ClearingHouse__closePositionInputParamsStruct
  ): ClearingHouse__closePositionResult {
    let result = super.call(
      "closePosition",
      "closePosition((address,uint160,uint256,uint256,bytes32)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new ClearingHouse__closePositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_closePosition(
    params: ClearingHouse__closePositionInputParamsStruct
  ): ethereum.CallResult<ClearingHouse__closePositionResult> {
    let result = super.tryCall(
      "closePosition",
      "closePosition((address,uint160,uint256,uint256,bytes32)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__closePositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  getAccountBalance(): Address {
    let result = super.call(
      "getAccountBalance",
      "getAccountBalance():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getAccountBalance(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getAccountBalance",
      "getAccountBalance():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getAccountValue(trader: Address): BigInt {
    let result = super.call(
      "getAccountValue",
      "getAccountValue(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );

    return result[0].toBigInt();
  }

  try_getAccountValue(trader: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getAccountValue",
      "getAccountValue(address):(int256)",
      [ethereum.Value.fromAddress(trader)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getClearingHouseConfig(): Address {
    let result = super.call(
      "getClearingHouseConfig",
      "getClearingHouseConfig():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getClearingHouseConfig(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getClearingHouseConfig",
      "getClearingHouseConfig():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getExchange(): Address {
    let result = super.call("getExchange", "getExchange():(address)", []);

    return result[0].toAddress();
  }

  try_getExchange(): ethereum.CallResult<Address> {
    let result = super.tryCall("getExchange", "getExchange():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getInsuranceFund(): Address {
    let result = super.call(
      "getInsuranceFund",
      "getInsuranceFund():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getInsuranceFund(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getInsuranceFund",
      "getInsuranceFund():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOrderBook(): Address {
    let result = super.call("getOrderBook", "getOrderBook():(address)", []);

    return result[0].toAddress();
  }

  try_getOrderBook(): ethereum.CallResult<Address> {
    let result = super.tryCall("getOrderBook", "getOrderBook():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getQuoteToken(): Address {
    let result = super.call("getQuoteToken", "getQuoteToken():(address)", []);

    return result[0].toAddress();
  }

  try_getQuoteToken(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getQuoteToken",
      "getQuoteToken():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getTrustedForwarder(): Address {
    let result = super.call(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getTrustedForwarder(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getTrustedForwarder",
      "getTrustedForwarder():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getUniswapV3Factory(): Address {
    let result = super.call(
      "getUniswapV3Factory",
      "getUniswapV3Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getUniswapV3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getUniswapV3Factory",
      "getUniswapV3Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getVault(): Address {
    let result = super.call("getVault", "getVault():(address)", []);

    return result[0].toAddress();
  }

  try_getVault(): ethereum.CallResult<Address> {
    let result = super.tryCall("getVault", "getVault():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isTrustedForwarder(forwarder: Address): boolean {
    let result = super.call(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );

    return result[0].toBoolean();
  }

  try_isTrustedForwarder(forwarder: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isTrustedForwarder",
      "isTrustedForwarder(address):(bool)",
      [ethereum.Value.fromAddress(forwarder)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  openPosition(
    params: ClearingHouse__openPositionInputParamsStruct
  ): ClearingHouse__openPositionResult {
    let result = super.call(
      "openPosition",
      "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );

    return new ClearingHouse__openPositionResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_openPosition(
    params: ClearingHouse__openPositionInputParamsStruct
  ): ethereum.CallResult<ClearingHouse__openPositionResult> {
    let result = super.tryCall(
      "openPosition",
      "openPosition((address,bool,bool,uint256,uint256,uint256,uint160,bytes32)):(uint256,uint256)",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ClearingHouse__openPositionResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  removeLiquidity(
    params: ClearingHouse__removeLiquidityInputParamsStruct
  ): ClearingHouse__removeLiquidityResultValue0Struct {
    let result = super.call(
      "removeLiquidity",
      "removeLiquidity((address,int24,int24,uint128,uint256,uint256,uint256)):((uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(params)]
    );

    return changetype<ClearingHouse__removeLiquidityResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_removeLiquidity(
    params: ClearingHouse__removeLiquidityInputParamsStruct
  ): ethereum.CallResult<ClearingHouse__removeLiquidityResultValue0Struct> {
    let result = super.tryCall(
      "removeLiquidity",
      "removeLiquidity((address,int24,int24,uint128,uint256,uint256,uint256)):((uint256,uint256,uint256))",
      [ethereum.Value.fromTuple(params)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ClearingHouse__removeLiquidityResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  versionRecipient(): string {
    let result = super.call(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );

    return result[0].toString();
  }

  try_versionRecipient(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "versionRecipient",
      "versionRecipient():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class AddLiquidityCall extends ethereum.Call {
  get inputs(): AddLiquidityCall__Inputs {
    return new AddLiquidityCall__Inputs(this);
  }

  get outputs(): AddLiquidityCall__Outputs {
    return new AddLiquidityCall__Outputs(this);
  }
}

export class AddLiquidityCall__Inputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get params(): AddLiquidityCallParamsStruct {
    return changetype<AddLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AddLiquidityCall__Outputs {
  _call: AddLiquidityCall;

  constructor(call: AddLiquidityCall) {
    this._call = call;
  }

  get value0(): AddLiquidityCallValue0Struct {
    return changetype<AddLiquidityCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class AddLiquidityCallParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get base(): BigInt {
    return this[1].toBigInt();
  }

  get quote(): BigInt {
    return this[2].toBigInt();
  }

  get lowerTick(): i32 {
    return this[3].toI32();
  }

  get upperTick(): i32 {
    return this[4].toI32();
  }

  get minBase(): BigInt {
    return this[5].toBigInt();
  }

  get minQuote(): BigInt {
    return this[6].toBigInt();
  }

  get useTakerBalance(): boolean {
    return this[7].toBoolean();
  }

  get deadline(): BigInt {
    return this[8].toBigInt();
  }
}

export class AddLiquidityCallValue0Struct extends ethereum.Tuple {
  get base(): BigInt {
    return this[0].toBigInt();
  }

  get quote(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): BigInt {
    return this[2].toBigInt();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }
}

export class CancelAllExcessOrdersCall extends ethereum.Call {
  get inputs(): CancelAllExcessOrdersCall__Inputs {
    return new CancelAllExcessOrdersCall__Inputs(this);
  }

  get outputs(): CancelAllExcessOrdersCall__Outputs {
    return new CancelAllExcessOrdersCall__Outputs(this);
  }
}

export class CancelAllExcessOrdersCall__Inputs {
  _call: CancelAllExcessOrdersCall;

  constructor(call: CancelAllExcessOrdersCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class CancelAllExcessOrdersCall__Outputs {
  _call: CancelAllExcessOrdersCall;

  constructor(call: CancelAllExcessOrdersCall) {
    this._call = call;
  }
}

export class CancelExcessOrdersCall extends ethereum.Call {
  get inputs(): CancelExcessOrdersCall__Inputs {
    return new CancelExcessOrdersCall__Inputs(this);
  }

  get outputs(): CancelExcessOrdersCall__Outputs {
    return new CancelExcessOrdersCall__Outputs(this);
  }
}

export class CancelExcessOrdersCall__Inputs {
  _call: CancelExcessOrdersCall;

  constructor(call: CancelExcessOrdersCall) {
    this._call = call;
  }

  get maker(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get orderIds(): Array<Bytes> {
    return this._call.inputValues[2].value.toBytesArray();
  }
}

export class CancelExcessOrdersCall__Outputs {
  _call: CancelExcessOrdersCall;

  constructor(call: CancelExcessOrdersCall) {
    this._call = call;
  }
}

export class ClosePositionCall extends ethereum.Call {
  get inputs(): ClosePositionCall__Inputs {
    return new ClosePositionCall__Inputs(this);
  }

  get outputs(): ClosePositionCall__Outputs {
    return new ClosePositionCall__Outputs(this);
  }
}

export class ClosePositionCall__Inputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get params(): ClosePositionCallParamsStruct {
    return changetype<ClosePositionCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class ClosePositionCall__Outputs {
  _call: ClosePositionCall;

  constructor(call: ClosePositionCall) {
    this._call = call;
  }

  get base(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get quote(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ClosePositionCallParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[1].toBigInt();
  }

  get oppositeAmountBound(): BigInt {
    return this[2].toBigInt();
  }

  get deadline(): BigInt {
    return this[3].toBigInt();
  }

  get referralCode(): Bytes {
    return this[4].toBytes();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get clearingHouseConfigArg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get vaultArg(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get quoteTokenArg(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get uniV3FactoryArg(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get exchangeArg(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get accountBalanceArg(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get insuranceFundArg(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateCall extends ethereum.Call {
  get inputs(): LiquidateCall__Inputs {
    return new LiquidateCall__Inputs(this);
  }

  get outputs(): LiquidateCall__Outputs {
    return new LiquidateCall__Outputs(this);
  }
}

export class LiquidateCall__Inputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get baseToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class LiquidateCall__Outputs {
  _call: LiquidateCall;

  constructor(call: LiquidateCall) {
    this._call = call;
  }
}

export class OpenPositionCall extends ethereum.Call {
  get inputs(): OpenPositionCall__Inputs {
    return new OpenPositionCall__Inputs(this);
  }

  get outputs(): OpenPositionCall__Outputs {
    return new OpenPositionCall__Outputs(this);
  }
}

export class OpenPositionCall__Inputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get params(): OpenPositionCallParamsStruct {
    return changetype<OpenPositionCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class OpenPositionCall__Outputs {
  _call: OpenPositionCall;

  constructor(call: OpenPositionCall) {
    this._call = call;
  }

  get base(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get quote(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class OpenPositionCallParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get isBaseToQuote(): boolean {
    return this[1].toBoolean();
  }

  get isExactInput(): boolean {
    return this[2].toBoolean();
  }

  get amount(): BigInt {
    return this[3].toBigInt();
  }

  get oppositeAmountBound(): BigInt {
    return this[4].toBigInt();
  }

  get deadline(): BigInt {
    return this[5].toBigInt();
  }

  get sqrtPriceLimitX96(): BigInt {
    return this[6].toBigInt();
  }

  get referralCode(): Bytes {
    return this[7].toBytes();
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class RemoveLiquidityCall extends ethereum.Call {
  get inputs(): RemoveLiquidityCall__Inputs {
    return new RemoveLiquidityCall__Inputs(this);
  }

  get outputs(): RemoveLiquidityCall__Outputs {
    return new RemoveLiquidityCall__Outputs(this);
  }
}

export class RemoveLiquidityCall__Inputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get params(): RemoveLiquidityCallParamsStruct {
    return changetype<RemoveLiquidityCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RemoveLiquidityCall__Outputs {
  _call: RemoveLiquidityCall;

  constructor(call: RemoveLiquidityCall) {
    this._call = call;
  }

  get value0(): RemoveLiquidityCallValue0Struct {
    return changetype<RemoveLiquidityCallValue0Struct>(
      this._call.outputValues[0].value.toTuple()
    );
  }
}

export class RemoveLiquidityCallParamsStruct extends ethereum.Tuple {
  get baseToken(): Address {
    return this[0].toAddress();
  }

  get lowerTick(): i32 {
    return this[1].toI32();
  }

  get upperTick(): i32 {
    return this[2].toI32();
  }

  get liquidity(): BigInt {
    return this[3].toBigInt();
  }

  get minBase(): BigInt {
    return this[4].toBigInt();
  }

  get minQuote(): BigInt {
    return this[5].toBigInt();
  }

  get deadline(): BigInt {
    return this[6].toBigInt();
  }
}

export class RemoveLiquidityCallValue0Struct extends ethereum.Tuple {
  get base(): BigInt {
    return this[0].toBigInt();
  }

  get quote(): BigInt {
    return this[1].toBigInt();
  }

  get fee(): BigInt {
    return this[2].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetOwnerCall extends ethereum.Call {
  get inputs(): SetOwnerCall__Inputs {
    return new SetOwnerCall__Inputs(this);
  }

  get outputs(): SetOwnerCall__Outputs {
    return new SetOwnerCall__Outputs(this);
  }
}

export class SetOwnerCall__Inputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetOwnerCall__Outputs {
  _call: SetOwnerCall;

  constructor(call: SetOwnerCall) {
    this._call = call;
  }
}

export class SetTrustedForwarderCall extends ethereum.Call {
  get inputs(): SetTrustedForwarderCall__Inputs {
    return new SetTrustedForwarderCall__Inputs(this);
  }

  get outputs(): SetTrustedForwarderCall__Outputs {
    return new SetTrustedForwarderCall__Outputs(this);
  }
}

export class SetTrustedForwarderCall__Inputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }

  get trustedForwarderArg(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTrustedForwarderCall__Outputs {
  _call: SetTrustedForwarderCall;

  constructor(call: SetTrustedForwarderCall) {
    this._call = call;
  }
}

export class SettleAllFundingCall extends ethereum.Call {
  get inputs(): SettleAllFundingCall__Inputs {
    return new SettleAllFundingCall__Inputs(this);
  }

  get outputs(): SettleAllFundingCall__Outputs {
    return new SettleAllFundingCall__Outputs(this);
  }
}

export class SettleAllFundingCall__Inputs {
  _call: SettleAllFundingCall;

  constructor(call: SettleAllFundingCall) {
    this._call = call;
  }

  get trader(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SettleAllFundingCall__Outputs {
  _call: SettleAllFundingCall;

  constructor(call: SettleAllFundingCall) {
    this._call = call;
  }
}

export class UniswapV3MintCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3MintCallbackCall__Inputs {
    return new UniswapV3MintCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3MintCallbackCall__Outputs {
    return new UniswapV3MintCallbackCall__Outputs(this);
  }
}

export class UniswapV3MintCallbackCall__Inputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }

  get amount0Owed(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Owed(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3MintCallbackCall__Outputs {
  _call: UniswapV3MintCallbackCall;

  constructor(call: UniswapV3MintCallbackCall) {
    this._call = call;
  }
}

export class UniswapV3SwapCallbackCall extends ethereum.Call {
  get inputs(): UniswapV3SwapCallbackCall__Inputs {
    return new UniswapV3SwapCallbackCall__Inputs(this);
  }

  get outputs(): UniswapV3SwapCallbackCall__Outputs {
    return new UniswapV3SwapCallbackCall__Outputs(this);
  }
}

export class UniswapV3SwapCallbackCall__Inputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }

  get amount0Delta(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amount1Delta(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class UniswapV3SwapCallbackCall__Outputs {
  _call: UniswapV3SwapCallbackCall;

  constructor(call: UniswapV3SwapCallbackCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall extends ethereum.Call {
  get inputs(): UpdateOwnerCall__Inputs {
    return new UpdateOwnerCall__Inputs(this);
  }

  get outputs(): UpdateOwnerCall__Outputs {
    return new UpdateOwnerCall__Outputs(this);
  }
}

export class UpdateOwnerCall__Inputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}

export class UpdateOwnerCall__Outputs {
  _call: UpdateOwnerCall;

  constructor(call: UpdateOwnerCall) {
    this._call = call;
  }
}
